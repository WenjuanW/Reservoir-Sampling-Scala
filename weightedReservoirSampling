import scala.math._
import scala.util.Random


object weightedRandomSampling_Res  {
  
  
/*---Inputs-----------
* StreamWithWeight: is the data stream (data points with their associated weights (generated with an external process). 
                    The weight is appended as the last feature of each coming data point): 
                    Matrix (m x n+1)), m is the number of data points, n is the number of features, (n+1)th column is the weight.
* reservoirSize: is the size of the reservoir : Integer.
---Output-----------
* Matrix (rx(n+1)) containing the weighted reservoir samples (the same format with streamWithWeight), r is the reservoir size.
---Example----------
* weightedReservoirSampling_ES([1 2 3 0.5; 1 2 5 0.3, 2 4 3 0.4,…], 100) 
---References-------- 
* P.S. Efraimidis and P.G. Spirakis. Weighted random sampling with a reservoir. Information Processing Letters, 97(5):181–185, 2006. 
---Author-----------
* written by Wenjuan Wang, Department of Computing, Bournemouth University
*/
  
    def weightedReservoirSampling_Res (streamWithWeight: Array[Array[Double]], reservoirSize:Int): Array[Array[Double]]={
 
     val weightedReservoir = Array.ofDim[Double](reservoirSize, 0)   
     val key = Array.fill(reservoirSize)(0.0)          
     val rand = scala.util.Random
     var i: Int = 0
     var key_current = 0.0
     var T = 0.0
     var T_index: Int = 0
    
     for (streamElement <- streamWithWeight ) {
      val featureSize = streamElement.length
      
      if(i < reservoirSize){
        key(i) = scala.math.pow(rand.nextDouble, (1/streamElement(featureSize-1)))     
        weightedReservoir(i) = streamElement 
      } else {
        key_current = scala.math.pow(rand.nextDouble, (1/streamElement(featureSize-1)))
        T =  key.reduceLeft(min)
        T_index = key.view.zipWithIndex.minBy(_._1)._2             
        if (key_current > T){
           key(T_index) = key_current
           weightedReservoir(T_index) = streamElement
        }  
      }  
      i += 1
     }
     weightedReservoir   
   }
   
   ////------A small example for testing---------------------------------------------
    
   def main(args: Array[String]) {
     
     val streamWithWeight = Array(Array(1.0, 0.3, 5.0,0.2), Array(1.2, 4.2, 5.2,0.1),
                                  Array(2.0, 3.2, 5.2,0.3), Array(1.2, 3.5, 7.6,0.5),
                                  Array(1.1, 8.8, 5.2,0.8), Array(1.3, 7.2, 5.2,0.8),
                                  Array(5.2, 3.1, 5.6,0.4), Array(8.2, 3.1, 5.5,0.5))                       
     val reservoirSize = 4
      
     val x = weightedReservoirSampling_Res(streamWithWeight, reservoirSize) 
     
     println(x.deep.mkString("\n"))
   }
  ////-------------------------------------------------------------------------------
  
}
